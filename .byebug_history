continue
Board.find(1222224444)
Board.find!(params[:id])
Board.find(params[:id])
continue
exception
continue
exception.message
exception
continue
@board.valid?
continue
board_params[:afasd]
board_params.to_h.values_at(:email, :rows, :cols, :abc)
email, rows, cols, mines = board_params.to_h.values_at(:email, :rows, :cols, :mines).tap { |1_, *rest| rest.map!(&:to_i) }
email
rows
email, rows, cols, mines = board_params.to_h.values_at(:email, :rows, :cols, :mines).tap { |_, *rest| rest.map!(&:to_i) }
board_params.to_h.values_at(:email, :rows, :cols, :mines)
board_params.to_h.values_at(:email, :rows, :cols, :mines).map(&:to_i)
board_params.to_h.values_at(:email, :rows, :cols, :mines)
[rows, cols, mines].map(&:to_i)
*[rows, cols, mines].map(&:to_i)
[rows, cols, mines].map(&:to_i)
rows
email
continue
mines
continue
@board.valid?
@board
@board.save!
@board
@board.valid?
continue
@board.save!
@board.valid?
continue
@board.valid?
@board.save!
@board
continue
params[:id]
@board
continue
mines_location
rows
continue
rows
mines_location
@board.valid?
continue
@board.valid?
continue
@board.valid?
@board
continue
board_params[:mines].to_i > board_params[:height].to_i * board_params[:width].to_i
board_params
continue
post :create, params: { board: { email: 'test@example.com', rows: 5, cols: 5, mines: 5 } }
post :create_board, params: { board: { email: 'test@example.com', rows: 5, cols: 5, mines: 5 } }
continue
post :create, params: { board: { email: 'test@example.com', rows: 5, cols: 5, mines: 5 } }
Board.count
post :create, params: { board: { email: 'test@example.com', rows: 5, cols: 5, mines: 5 } }
c
mines
'
c
dimension = rows * cols
mines
mibnes
c
@board.save!
@board
      @board = Board.new(email: email, rows: rows.to_i, cols: cols.to_i, mines: mines_location)
      mines_location = BoardCreator.placements(*[rows, cols, mines].map(&:to_i))
      email, rows, cols, mines = board_params.to_h.values_at(:email, :rows, :cols, :mines)
c
mines
minesz
cols
rows
email
      email, rows, cols, mines = board_params.to_h.values_at(:email, :rows, :cols, :mines)
email, *s  = **board_params.to_h
email
email, *s  =board_params.to_h
board_params.to_h
mines
miunesd
cols
rows
email
email, rows, cols, mines = *(board_params.to_h)
email, phone = *(board_params.to_h)
email, phone = *board_params.to_h
phone
email
email, phone = *board_params
email, phone = *h
:email, :phone = *h
email, phone = *h
h = {email: 'shahroz', phone: '333'}
*h
*board_params
board_params
*board_params
email = *h
email = h
h = {:email => 'shahroz'}
params.require(:board).permit!
params.require(:board).permit(:email)
params.require(:board)
params
board_params['rows']
board_params['row']
board_params['row'D]
board_params['email']
board_params[email]
email, rows, cols, mines = board_params
{email, rows, cols, mines} = *board_params
rows
email, rows, cols, mines = *board_params
email, rows, cols, mines = **board_params
rows
email
email, rows, cols, mines = board_params
c
email
email = board_params.permit(:email)
board_params.permit(:email)
board_params.permit()
board_params[:row]
params.require(:board).permit!
params.require(:board)
params.require(Board)
params
board_params
email
c
params.require(:board)
params
board_params
email
